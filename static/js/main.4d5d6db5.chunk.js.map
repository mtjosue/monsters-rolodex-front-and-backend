{"version":3,"sources":["components/card/card.jsx","components/card-list/card-list.jsx","components/search-box/search-box.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","monster","className","alt","src","id","name","email","CardList","props","console","log","toUpperCase","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","a","axios","get","data","getUsers","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wWAEaA,EAAO,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACrB,OACE,sBAAKC,UAAU,iBAAf,UACE,qBACEC,IAAI,UACJC,IAAG,+BAA0BH,EAAQI,GAAlC,4BAEL,6BAAKJ,EAAQK,OACb,4BAAIL,EAAQM,YCPLC,EAAW,SAACC,GAIvB,OAFAC,QAAQC,IAAI,sBAAsBC,cAAeH,EAAMI,UAIrD,aADA,CACA,OAAKX,UAAU,YAAf,SACGO,EAAMI,SAASC,KAAI,SAACb,GAAD,OAClB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQI,UCTdU,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACvB,uBACEf,UAAU,SACVgB,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCyDCG,E,kDAxDb,aAAe,IAAD,8BACZ,gBA8BFH,aAAe,SAACI,GACd,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SA9BtC,EAAKC,MAAQ,CACXb,SAAU,GACVU,YAAa,IAJH,E,qDASd,WAAqB,IAAD,QACJ,uCAAG,8BAAAI,EAAA,sEACQC,IAAMC,IAC3B,8CAFa,gBACPC,EADO,EACPA,KAGRpB,QAAQC,IAAI,iBAAiBC,cAAekB,GAI5C,EAAKR,SAAS,CAAET,SAAUiB,IARX,2CAAH,qDAUdC,K,oBAeF,WAEE,MAAkCC,KAAKN,MAA/Bb,EAAR,EAAQA,SAAUU,EAAlB,EAAkBA,YAEZU,EAAmBpB,EAASqB,QAAO,SAACjC,GAAD,OACvCA,EAAQK,KAAK6B,cAAcC,SAASb,EAAYY,kBAGlD,OACE,sBAAKjC,UAAU,MAAf,UACE,oDACA,cAAC,EAAD,CACEc,YAAY,kBACZC,aAAce,KAAKf,eAErB,cAAC,EAAD,CAAUJ,SAAUoB,W,GAnDVI,aCKHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.4d5d6db5.chunk.js","sourcesContent":["import \"./card.styles.css\";\r\n//\r\nexport const Card = ({ monster }) => {\r\n  return (\r\n    <div className=\"card-container\">\r\n      <img\r\n        alt=\"monster\"\r\n        src={`https://robohash.org/${monster.id}?set=set2&size=180x180`}\r\n      />\r\n      <h2>{monster.name}</h2>\r\n      <p>{monster.email}</p>\r\n    </div>\r\n  );\r\n};\r\n","import \"./card-list.styles.css\";\r\nimport { Card } from \"../card/card\";\r\n//\r\nexport const CardList = (props) => {\r\n  //\r\n  console.log(\"card-list line 4 : \".toUpperCase(), props.monsters);\r\n  //\r\n  return (\r\n    //\r\n    <div className=\"card-list\">\r\n      {props.monsters.map((monster) => (\r\n        <Card key={monster.id} monster={monster} />\r\n      ))}\r\n    </div>\r\n    //\r\n  );\r\n  //\r\n};\r\n","import \"./search-box.styles.css\";\r\n//\r\nexport const SearchBox = ({ placeholder, handleChange }) => (\r\n  <input\r\n    className=\"search\"\r\n    type=\"search\"\r\n    placeholder={placeholder}\r\n    onChange={handleChange}\r\n  />\r\n);\r\n","// import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { Component } from \"react\";\nimport axios from \"axios\";\nimport { CardList } from \"./components/card-list/card-list\";\nimport { SearchBox } from \"./components/search-box/search-box\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      monsters: [],\n      searchField: \"\",\n    };\n    // this.handleChange = this.handleChange.bind(this);\n  }\n  //\n  componentDidMount() {\n    const getUsers = async () => {\n      const { data } = await axios.get(\n        \"https://jsonplaceholder.typicode.com/users\"\n      );\n      console.log(\"app line 32 : \".toUpperCase(), data);\n      //\n      // const users = await data.json();\n      // data.json();\n      this.setState({ monsters: data });\n    };\n    getUsers();\n    //\n    // fetch(\"https://jsonplaceholder.typicode.com/users\").then((response) =>\n    //   // console.log(response)\n    //   response.json().then((users) =>\n    //     // console.log(\"USERS LINE 27 : \", users)\n    //     this.setState({ monsters: users })\n    //   )\n    // );\n  }\n  //\n  handleChange = (e) => {\n    this.setState({ searchField: e.target.value });\n  };\n  //\n  render() {\n    //\n    const { monsters, searchField } = this.state;\n    //\n    const filteredMonsters = monsters.filter((monster) =>\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n    //\n    return (\n      <div className=\"App\">\n        <h1> Monsters Rolodex </h1>\n        <SearchBox\n          placeholder=\"Search Monsters\"\n          handleChange={this.handleChange}\n        />\n        <CardList monsters={filteredMonsters} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}